---
title: "network_viz"
format: html
editor: visual
---

```{r}
library(igraph)
library(ggraph)
library(ideanet)
```

## Importing and setting up our network.

Let's start by bringing our data. Today, we will using a school network you can pull from `ideanet`.

```{r}
nodes <- ideanet::fauxmesa_nodes
edges <- ideanet::fauxmesa_edges
```

For now, let's run our network through `ideanet` so we can grab all the measures.

```{r}
res <- netwrite(i_elements = edges$from, j_elements = edges$to, 
                nodelist = nodes, node_id = "id", directed = T)
```


## Visualisation with `plot()`.

Good for initial exploration, but very limited in scope. I wouldn't recommend using this for your final product.

```{r}

```


## Visualisation with `ggraph()`.

The `ggraph` approach has the benefit of being constructed on the ggplot syntax structure. If you already know ggplot, then switching is intuitive. If you don't know ggplot yet, you will need to learn eventually and this is a great way to get into it.

Beyond consistency with plotting other kinds of figures in R, ggraph allows for many of the editing benefits that come with ggplot. These include flexible exporting, individual layer and more -- don't worry, we will cover some of this in the upcoming sections.

The last, and perhaps best benefit of ggraph is that you can utilize the extensive communal knowledge base associated with ggplot. Applying a solution intended for histograms to your network visualization won't always work, but it's much more likely to get you there than fiddling around with base plot().

### The layer system

### Colors, shapes and size

### Layouts

Force layouts

Not force (circle, hierarchical)

### Extra

Faceting

Labeling / Title



















