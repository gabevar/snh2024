---
title: "network_viz"
format: html
editor: visual
---

```{r}
library(igraph)
library(ggraph)
library(ideanet)
library(dplyr)
library(ndtv)
```

## Importing and setting up our network.

Let's start by bringing our data. Today, we will using a school network you can pull from `ideanet`.

```{r}
nodes <- ideanet::fauxmesa_nodes
edges <- ideanet::fauxmesa_edges
```

For now, let's run our network through `ideanet` so we can grab all the measures.

```{r, message = F, warning = F}
res <- netwrite(i_elements = edges$from, j_elements = edges$to, 
                nodelist = nodes, node_id = "id", directed = T)

net <- res$network
```

## Visualisation with `plot()`.

Base R does allow you to plot networks, but I wouldn't recommend it! It's ok for initial exploration, but you will quickly run up on some limitations and frustrations.

```{r}
color <- RColorBrewer::brewer.pal(3, "Set1") 
color <- color[as.numeric(as.factor(V(net)$sex))]
V(net)$color <- color
plot(net, vertex.color = V(net)$color, layout = layout_with_kk, vertex.label = NA, 
     edge.arrow.size = 0.2, vertex.size = V(net)$total_degree)
```

## Visualisation with `ggraph()`.

The `ggraph` approach has the benefit of being constructed on the ggplot syntax structure. If you already know ggplot, then switching is intuitive. If you don't know ggplot yet, you will need to learn eventually and this is a great way to get into it.

Beyond consistency with plotting other kinds of figures in R, ggraph allows for many of the editing benefits that come with ggplot. These include flexible exporting, individual layer and more -- don't worry, we will cover some of this in the upcoming sections.

The last, and perhaps best benefit of ggraph is that you can utilize the extensive communal knowledge base associated with ggplot. Applying a solution intended for histograms to your network visualization won't always work, but it's much more likely to get you there than fiddling around with base plot().

### The layer system

First, we set the base layer -- the network we are interested in using.

```{r}
ggraph(net, layout = "kk")
```

Second, let's add some points to the network. Notice the `+` sign at the end of the line. There's a couple of options we can go with here, but we will start with simple points from `geom_node_points()`.

```{r}
ggraph(net, layout = "kk") +
  geom_node_point()
```

Next, let's add the connections.

```{r}
ggraph(net, layout = "kk") +
  geom_node_point() +
  geom_edge_link()
```

Finally we can add some aesthetic changes

```{r}
ggraph(net, layout = "kk") +
  geom_node_point() +
  geom_edge_link() +
  theme_graph()
```

Visually, it's a little cluttered using the whole network. Let's instead focus on the main component

```{r}
nodes <- igraph::as_data_frame(net, what = "vertices")
net <- res$largest_component
nodes1 <- igraph::as_data_frame(net, what = "both")$vertices
edges1 <- igraph::as_data_frame(net, what = "both")$edges
nodes1 <- nodes1 %>% select(name) %>% left_join(nodes, by = c("name"))

net <- graph_from_data_frame(edges1, vertices = nodes1, directed = T)

ggraph(net, layout = "kk") +
  geom_node_point() +
  geom_edge_link(alpha = 0.5) +
  theme_graph()
```

### Colors, shapes and size

Ok let's add some information. Now that we have the basic setup ready, we can easily add some data that will make our picture more useful. For example, we may be interested in sex and grade homophily in this particular high-school component. For that, we can start by using color and shape.

```{r}
ggraph(net, layout = "kk") +
  geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
  geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
  theme_graph() +
  scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
  guides(size = "none")
```

We can add in some information in size as well! Let's see who is more popular as defined by in-degree

```{r}
ggraph(net, layout = "kk") +
  geom_node_point(aes(color = as.factor(grade), shape = sex, size = V(net)$in_degree)) +
  geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
  theme_graph() +
  scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
  guides(size = "none")
```

Let's try one more -- If information spread in this network, who would it have to go through to spread efficiently?

```{r}
ggraph(net, layout = "kk") +
  geom_node_point(aes(color = as.factor(grade), shape = sex, size = V(net)$betweenness_scores*2)) +
  geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
  theme_graph() +
  scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
  guides(size = "none")
```

### Layouts

What about the layout of our nodes and edges? You might have noticed the `layout = "kk"` argument is slipped into our `ggraph` calls. "kk" (standing for Kamada Kawai) is one of many layouts that acts as if edges are springs pushing and pulling nodes toward or away from each other. The goal is to represent nodes who share more connections close together, and those who share few far from each other. In a weighted network, this account for the strength of the relationships (or distance) between two nodes.

Based on this simple "spring" logic, there are lots of available layouts. Some classic ones include "fr", "nicely, and "stress". None of these are the "correct" layout -- they all emphasize some element of the graph, and obscure some others.

Although spring layouts are popular ways to visualize networks, other layouts may be much more effective. For example, let's take a look at an organizational network, where connections represent who reports to who.

```{r}
edges_tech <- ideanet::hightech %>% filter(layer == 3)
net_tech <- graph_from_data_frame(edges, directed = T)

ggraph(net_tech, layout = "dendrogram", direction = "in") +
  geom_node_label(aes(label = name), repel = F) +
  geom_edge_diagonal(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
  theme_graph()
```

In this case, the dendogram is a much more effective way to figure out the structure of the organization. But if we ask who is friends with who in this organization...

```{r}
edges_tech <- ideanet::hightech %>% filter(layer == 2)
net_tech <- graph_from_data_frame(edges, directed = T)

ggraph(net_tech, layout = "dendrogram", direction = "in") +
  geom_node_label(aes(label = name), repel = F) +
  geom_edge_diagonal(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
  theme_graph()
```

Circle layouts that focus on a single node can be helpful when trying to trying to visualize a particular ego-network

```{r}
library(tidygraph)


as_tbl_graph(net) %>% 
  mutate(d = distances(.G(), to = 1)) %>%
  ggraph(layout = 'focus', focus = 1) +
  geom_edge_fan() +
  ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = r), data.frame(r = 1:10), colour = 'grey') + 
  geom_node_point(aes(color = as.factor(d)), size = 3) +
  coord_fixed() + 
  scale_color_viridis_d() +
  labs(color='Distance from Node 0') +
  theme_graph()
```

This isn't so effective. Other potential layouts include circles, treemaps and many many more. Check out the resources at the end for more examples!

### Faceting

Sometimes, you might want to compare different parts of your graph. For example, we may want to know how the boys and girls in the Fauxmesa highschool differ.

```{r}
ggraph(net, layout = "kk") +
  geom_node_point(aes(color = as.factor(grade))) +
  geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
  scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
  facet_graph(~sex)
```

This also works if you have different kinds of relationships. In this example, we take a look at business and marriage relationships among notable Florentine families of the Renaissance.

```{r}
edges_fl <- ideanet::florentine_edges
nodes_fl <- ideanet::florentine_nodes
net_fl <- graph_from_data_frame(edges_fl, vertices = nodes_fl, directed = F)
V(net_fl)$deg <- degree(net_fl)

ggraph(net_fl, layout = "kk") +
  geom_node_point(aes(size = deg), alpha = 0.7) +
  geom_node_text(aes(label = family), repel = T) +
  geom_edge_link(alpha = 0.3) +
  facet_edges(~type) +
  guides(size = "none")
```

### Interactive and Dynamic Networks

This covers the basics of visualizing networks. From here, there a couple of fun extension we can look at including interactive and dynamic networks. We don't have time to focus on these (and they are far less commonly used), but it's good to know that they are an option.

R gives us the ability to move the nodes around, although the package can be a bit tough to use. For example, we could revisit a hierarchy example (example from https://cran.r-project.org/web/packages/visNetwork/vignettes/Introduction-to-visNetwork.html)

```{r}
nodes <- data.frame(id = 1:7)
edges <- data.frame(from = c(1,2,2,2,3,3), to = c(2,3,4,5,6,7))

visNetwork::visNetwork(nodes, edges, width = "100%") %>% 
  visNetwork::visEdges(arrows = "from") %>% 
  visNetwork::visHierarchicalLayout()
```

You can also do some of that and more on our IDEANet GUI!

```{r}
ideanetViz()
```

Dynamic networks are complex, but allow us to interpret the evolution of a network. For this, we can use the `ndtv` package to make a "movie" of business relationships among Florentine families.

```{r}
data(short.stergm.sim)
render.d3movie(short.stergm.sim,displaylabels=TRUE)
```

There is a whole lot more to explore!

## Ressources:

- All around awesome resource: https://kateto.net/netscix2016.html
- ggraph: https://ggraph.data-imaginist.com/index.html
- Stackoverflow...always!


