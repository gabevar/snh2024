ggraph(net, layout = "kk") +
geom_node_point(aes(color = sex)) +
geom_edge_link() +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point() +
geom_edge_link(alpha = 0.5) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = sex)) +
geom_edge_link(alpha = 0.5) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = sex, shape = grade)) +
geom_edge_link(alpha = 0.5) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = sex, shape = as.factor(grade))) +
geom_edge_link(alpha = 0.5) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex)) +
geom_edge_link(alpha = 0.5) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 2)) +
geom_edge_link(alpha = 0.5) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1.5)) +
geom_edge_link(alpha = 0.5) +
theme_graph()
net
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1.5)) +
geom_edge_link(alpha = 0.5, arrow = T) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1.5)) +
geom_edge_link(arrow = arrow(length = unit(4, 'mm')),
end_cap = circle(3, 'mm')) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1.5)) +
geom_edge_link(arrow = arrow(),
end_cap = circle(3, 'mm')) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1.5)) +
geom_edge_link(arrow = arrow()) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1.5)) +
geom_edge_fan() +
theme_graph()
net
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1.5)) +
geom_edge_link(arrow = grid::arrow(type = "closed", angle=15, length = unit(0.15, "inches"))) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex)) +
geom_edge_link(arrow = grid::arrow()) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex)) +
geom_edge_link(arrow = grid::arrow(length = 0.1)) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.15, "inches"), ends = "last", type = "closed")) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed")) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.5) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph()
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_size(guide = "none")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade") +
scale_size(guide = "none")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade") +
guides(color=guide_legend(title="grade"))
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_fill_brewer(name = "grade")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color(name = "grade")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
guides(color = guide_legend(name = "grade"))
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade")
RColorBrewer::brewer.pal(6, "Set1")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set1"))
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set1")) +
scale_size(legend = NA)
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set1"))
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set1")) +
guides(size = "none")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
# scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set1")) +
guides(size = "none", color = "grade")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set1")) +
guides(size = "none")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = 1)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
guides(size = "none")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = V(net)$in_degree)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2"))
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = V(net)$in_degree)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
guides(size = "none")
net
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = V(net)$bonpow)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
guides(size = "none")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = V(net)$betweenness)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
guides(size = "none")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = V(net)$betweenness*10)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
guides(size = "none")
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = V(net)$betweenness*3)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
guides(size = "none")
V(net)$betweenness*3
net
V(net)$betweenness_scores
ggraph(net, layout = "kk") +
geom_node_point(aes(color = as.factor(grade), shape = sex, size = V(net)$betweenness_scores)) +
geom_edge_link(arrow = arrow(angle = 30, length = unit(0.05, "inches"), ends = "last", type = "closed"), alpha = 0.3) +
theme_graph() +
scale_color_manual(name = "grade", values = RColorBrewer::brewer.pal(6, "Set2")) +
guides(size = "none")
library(igraph)
library(tidyverse)
library(ggraph)
library(tidygraph)
library(egor)
library(ideanet)
gss <- read.csv("https://raw.githubusercontent.com/mahoffman/stanford_networks/main/data/gss_local_nets.csv", stringsAsFactors = TRUE)
gss <- gss %>%
filter(numgiven > 0) %>%  # removing respondents with 0 nominations
rowid_to_column("ego_id") # create an ID for each ego
ego_data <- gss %>%
select(ego_id, sex, race, age, partyid, relig, numgiven) # select columns
head(ego_data)
gss %>% select(sex1:relig5) %>% names()
alter_data <- gss %>%
select(ego_id, matches("[a-z][0-9]$")) # selecting columns that end with a letter and a number.
alter_data
alter_data %>% select(matches("educ"))
alter_data <- alter_data %>% select(-matches("educ"))
alter_data_int <- alter_data %>%
group_by(ego_id) %>% # make sure to group by ego
select(where(is.integer)) %>% # only take integers
pivot_longer(-ego_id) %>% # Pivot so that everything is long
separate(name, into = c("name", "alter_id"), sep = -1) %>% # split the id of alters from the variable
pivot_wider(names_from = "name", values_from = "value") %>% # Half pivot back to wide
mutate(alter_id = as.numeric(alter_id)) # cleanup
head(alter_data_int)
alter_data_fact <- alter_data %>%
group_by(ego_id) %>%
select(where(is.factor)) %>% # note the change to factor
pivot_longer(-ego_id) %>%
separate(name, into = c("name", "alter_id"), sep = -1) %>%
pivot_wider(names_from = "name", values_from = "value") %>%
mutate(alter_id = as.numeric(alter_id)) # cleanup
alter_data <- alter_data_int %>% left_join(alter_data_fact, by = c("ego_id", "alter_id"))
selected_cols <- c("sex", "race", "age", "relig")
alter_data$na <- rowSums(!is.na(alter_data[selected_cols]))
alter_data <- alter_data %>% filter(na != 0) %>% select(-na)
aa_data <- gss %>%
select(ego_id, matches("close")) %>%
group_by(ego_id) %>%
pivot_longer(-ego_id) %>%
separate(name, into = c("name", "to"), sep = -1) %>% # remember to split up twice here
separate(name, into = c("name", "from"), sep = -1) %>%
select(-name) %>% # remove useful column
mutate(from = as.numeric(from), to = as.numeric(to)) %>%
filter(value > 0 & !is.na(value))
head(aa_data)
one_alter <- alter_data %>%
filter(ego_id == 1) %>%
ungroup() %>%
select(-ego_id)
one_aa <- aa_data %>%
filter(ego_id == 1) %>%
ungroup() %>%
select(-ego_id)
net <- igraph::graph_from_data_frame(one_aa, vertices = one_alter, directed = F)
plot(net)
net <- igraph::add_vertices(net, 1) # adding an extra node
net <- add_edges(net, c(rbind(seq(gorder(net) - 1), gorder(net)))) # adding edges to each other node in the network
V(net)$name[is.na(V(net)$name)] <- "ego" # calling it "ego"
plot(net)
nodes <- igraph::as_data_frame(net, what = "vertices") # turn our network back into a nodelist and edgelist
edges <- igraph::as_data_frame(net, what = "edges")
one_ego <- ego_data %>% # pull information about ego
filter(ego_id == 1) %>%
mutate(name = "ego", sex = case_when(sex == "male" ~ 0, T ~ 1), # make sure the ego variables match the alter variables
race = case_when(race == "white" ~ 0, T ~ 1)) %>%
select(name, sex, race, age, relig)
nodes <- nodes %>% slice(-n()) %>% bind_rows(one_ego) # bind to the nodelist
net <- graph_from_data_frame(edges, vertices = nodes, directed = F)
as_tbl_graph(net) %>% # graph the network
ggraph(layout = 'focus', focus = gorder(net)) +
geom_edge_link(alpha = 0.5) +
geom_node_point(aes(color = as.factor(sex)), size = 3) +
geom_node_text(aes(label = name), repel = T) +
coord_fixed() +
labs(color='Sex') +
scale_color_viridis_d() +
theme_graph()
egor_df <- egor(egos = ego_data,
alters = alter_data,
aaties = aa_data,
ID.vars = list(ego = "ego_id", alter = "alter_id", source = "from", target = "to"))
plot(egor_df)
res <- ego_netwrite(egos = ego_data, ego_id = "ego_id",
alters = alter_data, alter_id = "alter_id", alter_ego = "ego_id", max_alters = 5,
alter_alter = aa_data, aa_ego = "ego_id", i_elements = "from", j_elements = "to")
plot(res$igraph_objects[[1]]$igraph_ego)
res$alters %>% count(ego_id)
res$alters %>%
group_by(ego_id, sex) %>%
summarise(count = n()) %>%
mutate(proportion = prop.table(count)) %>%
filter(sex == 1)
res$alters %>%
group_by(ego_id, sex) %>%
summarise(count = n()) %>%
mutate(proportion = prop.table(count)) %>% # get proportions
mutate(proportion = proportion ^ 2) %>% # Calculate h-index
summarise(h_index = 1 - sum(proportion)) %>%
mutate(maxval = 1 - (1/length(unique(res$alters$sex))), # calculate iqv
iqv = h_index / maxval)
h_index(ego_id = res$alters$ego_id,
measure = res$alters$sex,
prefix = "sex")
iqv(ego_id = res$alters$ego_id,
measure = res$alters$sex,
prefix = "sex")
ego_dat <- data.frame(ego_id = res$egos$ego_id, ego_val = res$egos$relig)
alter_dat <- data.frame(ego_id = res$alters$ego_id, alter_val = res$alters$relig)
var_df <- dplyr::left_join(ego_dat, alter_dat, by = "ego_id")
var_df %>%
group_by(ego_id) %>%
summarize(same_relig = sum(as.character(alter_val) == as.character(ego_val), na.rm = T),
prop_same_relig = same_relig/n())
ego_homophily(ego_id = res$egos$ego_id,
ego_measure = res$egos$relig,
alter_ego = res$alters$ego_id,
alter_measure = res$alters$relig,
prefix = "relig",
prop = T)
var_df %>%
group_by(ego_id) %>%
summarize(length = n(),
num_sim = sum(as.character(alter_val) == as.character(ego_val), na.rm = T),
prop_sim = num_sim/length, num_diff = sum(as.character(alter_val) != as.character(ego_val), na.rm = T),
prop_diff = num_diff/length,
ei_index = (prop_diff - prop_sim)/length)
ei_index(ego_id = res$egos$ego_id,
ego_measure = res$egos$relig,
alter_ego = res$alters$ego_id,
alter_measure = res$alters$relig,
prefix = "relig")
net <- res$igraph_objects[[1]]$igraph
edge_density(net) # density
sum(degree(net) == 0)/gorder(net) # proportion isolates
gorder(net) - mean(degree(net)) # effective size (redundancy)
t <- igraph::distances(net) # get distances between all nodes to all nodes
t[is.infinite(t)] <- 0 # remove impossible paths
t <- t > 0 # binarize
diag(t) <- NA
1 - mean(t, na.rm = TRUE) # mean distance
plot(net)
res$summaries
res$summaries %>%
select(ego_id, network_size, density, prop_isolates, effective_size, fragmentation_index)
res$alters
res$egos
res$summaries
mod_df <- res$summaries %>%
select(ego_id, network_size, mean_degree,
density, num_isolates, effective_size) # Stuff we already have calculated
rel_ei <- ei_index(ego_id = res$egos$ego_id,
ego_measure = res$egos$relig,
alter_ego = res$alters$ego_id,
alter_measure = res$alters$relig,
prefix = "relig")
rel_ei
mod_df
sex_iqv <- iqv(ego_id = res$alters$ego_id,
measure = res$alters$sex,
prefix = "sex")
sex_iqv
rel_ei
mod_df %>%
left_join(rel_ei, by = "ego_id") %>%
left_join(sex_iqv)
mod_df %>%
left_join(rel_ei, by = "ego_id") %>%
left_join(sex_iqv, by = "ego_id")
mod_df %>%
left_join(rel_ei, by = "ego_id") %>%
left_join(sex_iqv, by = "ego_id") %>%
drop_na()
mod_df <- res$summaries %>%
select(ego_id, network_size, mean_degree,
num_isolates, effective_size) # Stuff we already have calculated
rel_ei <- ei_index(ego_id = res$egos$ego_id,
ego_measure = res$egos$relig,
alter_ego = res$alters$ego_id,
alter_measure = res$alters$relig,
prefix = "relig")
sex_iqv <- iqv(ego_id = res$alters$ego_id,
measure = res$alters$sex,
prefix = "sex")
mod_df %>%
left_join(rel_ei, by = "ego_id") %>%
left_join(sex_iqv, by = "ego_id") %>%
drop_na()
mod_df
mod_df
mod_df <- res$summaries %>%
select(ego_id, network_size, mean_degree,
num_isolates, effective_size) # Stuff we already have calculated
rel_ei <- ei_index(ego_id = res$egos$ego_id,
ego_measure = res$egos$relig,
alter_ego = res$alters$ego_id,
alter_measure = res$alters$relig,
prefix = "relig")
sex_iqv <- iqv(ego_id = res$alters$ego_id,
measure = res$alters$sex,
prefix = "sex")
mod_df <- mod_df %>% # bring them all back in.
left_join(rel_ei, by = "ego_id") %>%
left_join(sex_iqv, by = "ego_id") %>%
drop_na()
mod_df
summary(lm(sex_iqv ~ network_size, data = mod_df))
mod_df
summary(lm(sex_iqv ~ network_size + relig_ei_index + mean_degree + num_isolates, data = mod_df))
res$alters
ideanet::ngq_alters
egos <- ideanet::ngq_egos
alters <- ideanet::ngq_alters
aa <- ideanet::ngq_aa
egos
?ego_netwrite
aa
res <- ego_netwrite(egos = egos, ego_id = "ego_id",
alters = alters, alter_id = "alter_id", alter_ego = "ego_id",
alter_alter = aa, aa_ego = "ego_id", i_elements = "alter1", j_elements = "alter2")
res$alters
mod_df <- res$alters %>%
select(ego_id, alter_id, face, sex_alter = sex, white_alter = white,
family, total_degree)
mod_df
res$alters
res$egos
mod_df %>% left_join(res$egos %>% select(ego_id, age_ego = age, sex_ego = sex, white_ego = white, edu_ego = edu))
mod_df %>%
left_join(res$egos %>% select(ego_id, age_ego = age,
sex_ego = sex, white_ego = white, edu_ego = edu), by = "ego_id")
res$summaries
mod_df <- mod_df %>%
left_join(res$summaries %>% select(ego_id, network_size, num_isolates, effective_size), by = "ego_id")
mod_df
mod_df %>% mutate(case_when(sex_alter == sex_ego ~ 1, T ~ 0), white_alter == white_ego == ~ 1, T ~ 0)
mod_df %>% mutate(same_sex = case_when(sex_alter == sex_ego ~ 1, T ~ 0),
both_white = case_when(white_alter == white_ego == ~ 1, T ~ 0))
mod_df %>% mutate(same_sex = case_when(sex_alter = sex_ego ~ 1, T ~ 0),
both_white = case_when(white_alter = white_ego == ~ 1, T ~ 0))
mod_df <- res$alters %>%
select(ego_id, alter_id, face, sex_alter = sex, white_alter = white,
family, total_degree)
# Pick out ego variables
mod_df <- mod_df %>%
left_join(res$egos %>% select(ego_id, age_ego = age,
sex_ego = sex, white_ego = white, edu_ego = edu), by = "ego_id")
# Pick out network level variables
mod_df <- mod_df %>%
left_join(res$summaries %>% select(ego_id, network_size, num_isolates, effective_size), by = "ego_id")
# Create some comparisons
mod_df %>%
mutate(same_sex = case_when(sex_alter == sex_ego ~ 1, T ~ 0),
both_white = case_when(white_alter == white_ego ~ 1, T ~ 0))
# Grab existing ego-alter variables
mod_df <- res$alters %>%
select(ego_id, alter_id, face, sex_alter = sex, white_alter = white,
family, total_degree)
# Pick out ego variables
mod_df <- mod_df %>%
left_join(res$egos %>% select(ego_id, age_ego = age,
sex_ego = sex, white_ego = white, edu_ego = edu), by = "ego_id")
# Pick out network level variables
mod_df <- mod_df %>%
left_join(res$summaries %>% select(ego_id, network_size, num_isolates, effective_size), by = "ego_id")
# Create some comparisons
mod_df <- mod_df %>%
mutate(same_sex = case_when(sex_alter == sex_ego ~ 1, T ~ 0),
both_white = case_when(white_alter == white_ego ~ 1, T ~ 0))
mod_df
lme4::glmer(face ~ (1|ego_id) data = mod_df)
lme4::glmer(face ~ (1|ego_id), data = mod_df)
lme4::lmer(face ~ (1|ego_id), data = mod_df)
summary(lme4::lmer(face ~ (1|ego_id), data = mod_df))
mod_df
summary(lme4::lmer(face ~ white_alter + same_sex + total_degree + age_ego + network_size + (1|ego_id), data = mod_df))
mod_df
mod_df %>% drop_na()
mod_df
mod_df
# Grab existing ego-alter variables
mod_df <- res$alters %>%
select(ego_id, alter_id, face, sex_alter = sex, white_alter = white,
family, total_degree)
# Pick out ego variables
mod_df <- mod_df %>%
left_join(res$egos %>% select(ego_id, age_ego = age,
sex_ego = sex, white_ego = white, edu_ego = edu), by = "ego_id")
# Pick out network level variables
mod_df <- mod_df %>%
left_join(res$summaries %>% select(ego_id, network_size, num_isolates, effective_size), by = "ego_id")
# Create some comparisons
mod_df <- mod_df %>%
mutate(same_sex = case_when(sex_alter == sex_ego ~ 1, T ~ 0),
both_white = case_when(white_alter == white_ego ~ 1, T ~ 0))
mod_df
res$alters
summary(lme4::lmer(face ~ white_alter + same_sex + total_degree + age_ego + network_size + (1|ego_id), data = mod_df))
R.Version()
